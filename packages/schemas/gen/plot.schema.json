{
  "$ref": "#/definitions/DmPlot",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "DialogHooks": {
      "description": "A DialogHook allows the game to hook special dialogs into NPCs when the plot thread is in a given state.",
      "items": {
        "$ref": "#/definitions/DmDialogHook"
      },
      "type": "array"
    },
    "DmDialogData": {
      "additionalProperties": false,
      "description": "dmDialogData lets you define dialogs that pop up in game allowing the player to make a choice.",
      "properties": {
        "classType": {
          "const": "dmDialogData",
          "description": "The type of class. Constant.",
          "type": "string"
        },
        "instigatorSprite": {
          "description": "What sprite to use in the dialog window. Reference to an entityDef name in `spritedata/`.",
          "type": "string"
        },
        "message": {
          "description": "What is being said by the NPC.",
          "type": "string"
        },
        "responses": {
          "description": "Response options for the player to choose from.",
          "items": {
            "$ref": "#/definitions/DmDialogResponse"
          },
          "type": "array"
        },
        "soundToPlay": {
          "description": "Reference to a sound baked into the XACT files for the game.",
          "type": "string"
        },
        "title": {
          "description": "Title displayed at the top of the dialog popup.",
          "type": "string"
        }
      },
      "required": [
        "classType",
        "title",
        "message",
        "instigatorSprite",
        "responses"
      ],
      "type": "object"
    },
    "DmDialogHook": {
      "additionalProperties": false,
      "description": "A DialogHook allows the game to hook special dialogs into NPCs when the plot thread is in a given state.",
      "properties": {
        "dialogOptions": {
          "description": "Array of things you can offer the player to choose from.",
          "items": {
            "$ref": "#/definitions/DmDialogOption"
          },
          "type": "array"
        },
        "stateEquals": {
          "description": "The state that the plot thread must be in to trigger this dialog. Must match a key in a `dmPlotThread`'s `\"plotStateLookup\"`, for example `\"unstarted\"`.",
          "type": "string"
        },
        "targetArc": {
          "description": "The Archetype name of the NPC to be affected.",
          "type": "string"
        }
      },
      "required": [
        "targetArc",
        "stateEquals",
        "dialogOptions"
      ],
      "type": "object"
    },
    "DmDialogOption": {
      "additionalProperties": false,
      "description": "A dialog choice for the player.",
      "properties": {
        "message": {
          "description": "What is being said.",
          "type": "string"
        },
        "responseScript": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "enum": [
                "none"
              ],
              "type": "string"
            }
          ],
          "description": "Either `\"none\"` if there is no further dialog, or a reference to a root-level key in a json in `plotdata/` with `\"classType\": \"dmPlotScript\"`."
        }
      },
      "required": [
        "message",
        "responseScript"
      ],
      "type": "object"
    },
    "DmDialogResponse": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "message": {
              "description": "What is being said by the player character.",
              "type": "string"
            },
            "responseScript": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "enum": [
                    "none"
                  ],
                  "type": "string"
                }
              ],
              "description": "Either `\"none\"` if there is no further dialog, or a reference to a root-level key in a json in `plotdata/` with `\"classType\": \"dmPlotScript\"`."
            }
          },
          "required": [
            "message",
            "responseScript"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "message": {
              "description": "What is being said by the player character.",
              "type": "string"
            },
            "responseDialog": {
              "description": "You can use `responseDialog` to chain together dialog boxes. Reference to a root-level key in a json in `plotdata/` with `\"classType\": \"dmDialogData\"`.",
              "type": "string"
            }
          },
          "required": [
            "message",
            "responseDialog"
          ],
          "type": "object"
        }
      ],
      "description": "A dialog choice for the player."
    },
    "DmDropItemHook": {
      "additionalProperties": false,
      "description": "dmDropItemHook allow to define that specific items drop when the plot thread is in a given state.",
      "properties": {
        "dropArchetype": {
          "description": "What item will be dropped? Reference to an entitydef name in `itemdata/`",
          "type": "string"
        },
        "dropChance": {
          "description": "What is the probability that a monster in the `targetMonsterKnowledge` array will drop the item?",
          "maximum": 1,
          "minimum": 0,
          "type": "number"
        },
        "stateEquals": {
          "description": "In which plot state has this item a chance to drop? Must match a key in a `dmPlotThread`'s `\"plotStateLookup\"`, for example `\"unstarted\"`.",
          "type": "string"
        },
        "targetMonsterKnowledge": {
          "description": "What kind of monsters drop the item?",
          "items": {
            "$ref": "#/definitions/DmMonsterKnowledge"
          },
          "type": "array"
        }
      },
      "required": [
        "stateEquals",
        "targetMonsterKnowledge",
        "dropArchetype",
        "dropChance"
      ],
      "type": "object"
    },
    "DmDropItemHooks": {
      "description": "dmDropItemHook allow to define that specific items drop when the plot thread is in a given state.",
      "items": {
        "$ref": "#/definitions/DmDropItemHook"
      },
      "type": "array"
    },
    "DmMonsterKnowledge": {
      "enum": [
        "bandits",
        "bees",
        "brigands",
        "cultists",
        "greater_beasts",
        "lesser_beasts",
        "lizardmens",
        "orcs",
        "punks",
        "purpleonians",
        "scorpocompys",
        "scrobolds",
        "slimes",
        "snakes",
        "undeads",
        "warlords"
      ],
      "type": "string"
    },
    "DmPlot": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/DmPlotThread"
          },
          {
            "$ref": "#/definitions/DmPlotScript"
          },
          {
            "$ref": "#/definitions/DmDialogData"
          }
        ]
      },
      "description": "Dictionary from entitydef name to DmPlotThread, DmPlotScript, or DmDialogData. Docs at https://dungeonmans.fandom.com/wiki/Plot_Threads",
      "type": "object"
    },
    "DmPlotScript": {
      "additionalProperties": false,
      "description": "A dmPlotScript is a collection of information that can cause the world to change when run.",
      "properties": {
        "classType": {
          "const": "dmPlotScript",
          "description": "The type of class. Constant.",
          "type": "string"
        },
        "dialogArchetype": {
          "description": "Which dialog to trigger. A a reference to a root-level key in a json in `plotdata/` with `\"classType\": \"dmDialogData\"`",
          "type": "string"
        },
        "giveItems": {
          "additionalProperties": {
            "type": "integer"
          },
          "description": "Give these items directly to the player inventory. Dictionary from entityDef name in `itemdata/` to how many.",
          "type": "object"
        },
        "removeItems": {
          "additionalProperties": {
            "type": "integer"
          },
          "description": "Remove items from the player inventory. Dictionary from entityDef name in `itemdata/` to how many should be removed.",
          "type": "object"
        },
        "setThisState": {
          "description": "Sets the plot state to this value. This is how you can progress a plot. Must match a key in a `dmPlotThread`'s `\"plotStateLookup\"`, for example `\"unstarted\"`.",
          "type": "string"
        },
        "tossItems": {
          "additionalProperties": {
            "type": "integer"
          },
          "description": "Items to be tossed on the ground. Dictionary from entityDef name in `itemdata/` to how many.",
          "type": "object"
        }
      },
      "required": [
        "classType",
        "setThisState",
        "dialogArchetype"
      ],
      "type": "object"
    },
    "DmPlotStateLookup": {
      "additionalProperties": {
        "type": "number"
      },
      "description": "The collection of states that the plot thread can be in. Dictionary from states to numbers. The numbers do not really matter but it should be unique within the plotStateLookup. Every plot thread should start with `\"unstarted\"`.",
      "properties": {
        "unstarted": {
          "const": 0,
          "description": "Every plot thread starts in the `\"unstarted\"` state.",
          "type": "number"
        }
      },
      "required": [
        "unstarted"
      ],
      "type": "object"
    },
    "DmPlotThread": {
      "additionalProperties": false,
      "description": "A dmPlotThread base object that maintains all the world changes that your plot entails.",
      "properties": {
        "classType": {
          "const": "dmPlotThread",
          "description": "The type of class. Constant.",
          "type": "string"
        },
        "dialogHooks": {
          "$ref": "#/definitions/DialogHooks"
        },
        "dropItemHooks": {
          "$ref": "#/definitions/DmDropItemHooks"
        },
        "plotStateLookup": {
          "$ref": "#/definitions/DmPlotStateLookup"
        }
      },
      "required": [
        "classType",
        "plotStateLookup",
        "dialogHooks",
        "dropItemHooks"
      ],
      "type": "object"
    }
  }
}
